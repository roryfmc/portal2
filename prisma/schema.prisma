generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Operative {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  availability           Availability?
  complianceCertificates ComplianceCertificate[]
  nextOfKin              NextOfKin?
  personalDetails        PersonalDetails?
  rightToWork            RightToWork?
  siteAssignments        SiteAssignment[]
  siteLinks              SiteOperative[]
  timeOffRequests        TimeOffRequest[]
  unableToWorkWith       UnableToWorkWith[]      @relation("UnworkableSourceOperative")
  unworkableAsTarget     UnableToWorkWith[]      @relation("UnworkableTargetOperative")
  workSites              WorkSite[]
  TimeEntry              TimeEntry[]
  DailyAttendance        DailyAttendance[]
}

model UnableToWorkWith {
  id                String           @id @default(uuid())
  operativeId       String
  targetType        UnableTargetType
  targetOperativeId String?
  targetClientId    Int?
  note              String?
  createdAt         DateTime         @default(now())
  operative         Operative        @relation("UnworkableSourceOperative", fields: [operativeId], references: [id], onDelete: Cascade)
  targetClient      Client?          @relation("UnworkableTargetClient", fields: [targetClientId], references: [id])
  targetOperative   Operative?       @relation("UnworkableTargetOperative", fields: [targetOperativeId], references: [id])

  @@index([operativeId])
  @@index([targetClientId])
  @@index([targetOperativeId])
}

model PersonalDetails {
  id                String         @id @default(uuid())
  fullName          String
  email             String         @unique
  phone             String
  address           String
  dateOfBirth       DateTime
  nationalInsurance String
  employmentType    EmploymentType
  payrollNumber     String
  operativeId       String         @unique
  operative         Operative      @relation(fields: [operativeId], references: [id], onDelete: Cascade)
}

model NextOfKin {
  id           String    @id @default(uuid())
  name         String
  relationship String
  phone        String
  email        String?
  address      String
  operativeId  String    @unique
  operative    Operative @relation(fields: [operativeId], references: [id], onDelete: Cascade)
}

model RightToWork {
  id          String            @id @default(uuid())
  country     String
  status      RightToWorkStatus
  documentUrl String?
  expiryDate  DateTime?
  operativeId String            @unique
  operative   Operative         @relation(fields: [operativeId], references: [id], onDelete: Cascade)
}

model WorkSite {
  id          String    @id @default(uuid())
  siteName    String
  location    String
  startDate   DateTime
  endDate     DateTime?
  role        String
  contractor  String
  operativeId String
  operative   Operative @relation(fields: [operativeId], references: [id], onDelete: Cascade)

  @@index([operativeId])
  @@index([siteName])
}

model ComplianceCertificate {
  id                 String             @id @default(uuid())
  name               String
  issuer             String?
  issueDate          DateTime?
  expiryDate         DateTime
  status             CertificateStatus?
  documentUrl        String?
  operativeId        String
  notes              String?
  certType           CertificateType    @default(GENERAL)
  certificateDetails String?
  contact            String?
  dateVerified       DateTime?
  trainingProvider   String?
  verifiedBy         String?
  verifiedWith       String?
  operative          Operative          @relation(fields: [operativeId], references: [id], onDelete: Cascade)

  @@index([operativeId])
  @@index([status])
  @@index([expiryDate])
}

model TimeOffRequest {
  id          String        @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      TimeOffStatus @default(PENDING)
  operativeId String
  operative   Operative     @relation(fields: [operativeId], references: [id], onDelete: Cascade)

  @@index([operativeId])
  @@index([status])
  @@index([startDate, endDate])
}

model Availability {
  id               String     @id @default(uuid())
  mondayToFriday   Boolean
  saturday         Boolean
  sunday           Boolean
  nightShifts      Boolean
  unavailableDates DateTime[]
  operativeId      String     @unique
  operative        Operative  @relation(fields: [operativeId], references: [id], onDelete: Cascade)
}

model Client {
  id                 Int                @id @default(autoincrement())
  name               String
  email              String             @unique
  phone              String?
  company            String
  contactPerson      String
  createdAt          DateTime           @default(now())
  jobTypes           ClientJobType[]
  sites              ConstructionSite[]
  unworkableAsTarget UnableToWorkWith[] @relation("UnworkableTargetClient")
}

model ConstructionSite {
  id              String            @id @default(uuid())
  name            String
  address         String
  clientId        Int
  projectType     String
  startDate       DateTime
  endDate         DateTime
  requiredTrades  String[]
  maxOperatives   Int
  createdAt       DateTime          @default(now())
  status          String
  client          Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  assignments     SiteAssignment[]
  operatives      SiteOperative[]
  TimeEntry       TimeEntry[]
  DailyAttendance DailyAttendance[]

  @@index([clientId])
  @@index([status])
  @@index([startDate, endDate])
}

model SiteAssignment {
  id          String           @id @default(uuid())
  operativeId String
  siteId      String
  startDate   DateTime
  endDate     DateTime
  trade       String
  dailyRate   Decimal          @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime         @default(now())
  status      AssignmentStatus @default(SCHEDULED)
  operative   Operative        @relation(fields: [operativeId], references: [id], onDelete: Cascade)
  site        ConstructionSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  TimeEntry   TimeEntry[]

  @@index([operativeId])
  @@index([siteId])
  @@index([status])
  @@index([startDate, endDate])
}

model SiteOperative {
  id          Int                 @id @default(autoincrement())
  siteId      String
  operativeId String
  startDate   DateTime
  endDate     DateTime
  status      SiteOperativeStatus @default(ASSIGNED)
  offsiteReason String?
  operative   Operative           @relation(fields: [operativeId], references: [id], onDelete: Cascade)
  site        ConstructionSite    @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, operativeId, startDate])
  @@index([siteId])
  @@index([operativeId])
}

enum SiteOperativeStatus {
  AVAILABLE
  ASSIGNED
  DEPLOYED
  OFFSITE
}

model ClientJobType {
  id         Int      @id @default(autoincrement())
  clientId   Int
  name       String
  payRate    Decimal  @db.Decimal(10, 2)
  clientCost Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([name])
}

// Removed duplicate enum/model for TimeEntry; consolidated below

model DailyAttendance {
  id          String   @id @default(uuid())
  siteId      String
  operativeId String
  /**
   * Store as UTC midnight; youâ€™ll normalize in code
   */
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  site      ConstructionSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  operative Operative        @relation(fields: [operativeId], references: [id], onDelete: Cascade)

  @@unique([siteId, operativeId, date]) // one mark per day
  @@index([siteId, date])
  @@index([operativeId, date])
}

model TimeEntry {
  id            String   @id @default(uuid())
  siteId        String
  operativeId   String
  assignmentId  String?

  date          DateTime
  startTime     String
  endTime       String
  breakDuration Int      @default(0)
  totalHours    Decimal  @default(0)
  hourlyRate    Decimal?
  status        String   @default("pending")
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  operative  Operative        @relation(fields: [operativeId], references: [id], onDelete: Cascade)
  site       ConstructionSite @relation(fields: [siteId], references: [id], onDelete: Cascade)
  assignment SiteAssignment?  @relation(fields: [assignmentId], references: [id], onDelete: SetNull)

  // Indexes/constraints
  @@unique([siteId, operativeId, date], name: "siteId_operativeId_date")
  @@index([siteId, operativeId, date])
}


enum EmploymentType {
  SELF_EMPLOYED
  CONTRACT
  TEMPORARY
}

enum RightToWorkStatus {
  VERIFIED
  PENDING
  EXPIRED
  NOT_PROVIDED
}

enum CertificateStatus {
  VALID
  EXPIRING_SOON
  EXPIRED
  INVALID
}

enum CertificateType {
  GENERAL
  ASBESTOS
}

enum UnableTargetType {
  OPERATIVE
  CLIENT
}

enum TimeOffStatus {
  APPROVED
  PENDING
  REJECTED
}

enum AssignmentStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}
